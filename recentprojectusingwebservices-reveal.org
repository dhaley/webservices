#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+OPTIONS: num:nil toc:nil timestamp:nil
#+TITLE: Using Amazon Web Services as infrastructure
#+Author: Damon Haley
#+Email: dhaley@fastmail.com

# #+begin_quote
# Or How the Communications Web App team learned to love AWS Web Services with
# php frameworks
# How I got my stuff in the cloud at NREL
# #+end_quote

#+BEGIN_NOTES
Your note
#+END_NOTES

* About Me
** Senior web developer and devops specialist
** Set up continuous integration on three production environments at NREL

* Why the AWS ☁️?
** stay up-to-date (modernize & stay secure)
** gain control (scale & cost)
** catch errors outside of prod (continuous integration)
* Cloud-native architecture & frameworks ([[https://12factor.net][https://12factor.net]])
** 1) Reduce software erosion between app and infrastructure
*** separation between the app and the infrastructure on which it runs
**** can bundle libraries, system packages
#+begin_src shell
apk add -U --no-cache -t .wodby-php-edge-run-deps \
    -X http://dl-cdn.alpinelinux.org/alpine/edge/community/ \
    gnu-libiconv=1.15-r2; 
#+end_src
** 2) Solve dependency management in app
*** bundler, [[https://getcomposer.org][composer]] (private packagist)
#+begin_src shell
composer require aws/aws-sdk-php
#+end_src

#+begin_src shell
gem install aws-sdk
#+end_src
*** don't track build artifacts in version control
** 3) Achieve dev-prod parity 
*** Virtualbox with Vagrant
**** Configuration Management
***** Puppet
***** Chef
***** Ansible
*** OR
*** [[https://www.docker.com][Docker]]1 (immutable) images + Docker configuration (environment variables + init)

#+begin_src php
$databases['default']['default'] = [
    'host' => '{{ getenv "DB_HOST" "mariadb" }}',
    'database' => '{{ getenv "DB_NAME" "drupal" }}',
    'username' => '{{ getenv "DB_USER" "drupal" }}',
    'password' => '{{ getenv "DB_PASSWORD" "drupal" }}',
    'driver' => '{{ getenv "DB_DRIVER" "mysql" }}'
];
 
$settings['memcache']['servers'] = [
    '{{ getenv "MEMCACHE_HOST" "memcached" }}:11211' => 'default'
];

#+end_src


** 4) Separate config from code in app
*** app’s config is everything that is likely to vary between deploys (staging, production, developer environments, etc).
#+begin_src php
 * @code
 *   $config_directories = [
 *     CONFIG_SYNC_DIRECTORY => '/directory/outside/webroot',
 *   ];

#+end_src
** 5) Become stateless
*** avoid “sticky sessions”
*** datastore that offers time-expiration, such as Memcached or Redis

** 6) Centralize logging
*** Logs provide visibility into the behavior of a running app
* Continuous delivery with AWS Services
** Cluster Orchestration
*** Kubernetes, [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-ecs.html][ECS]], Swarm
*** Containers
**** [[https://www.nginx.com][nginx]], apache
***** 407445147104.dkr.ecr.us-west-2.amazonaws.com/communications-nginx:1.17.4.1
**** [[https://www.php.net][php]], python, ruby
[[file:./php-sdk-overview.png][file:./php-sdk-overview.png]]

** Relational Database Service
*** Amazon Aurora
** Storage
*** binary asset services
**** [[https://aws.amazon.com/s3/][S3]]
*** traditional NFS filesystem
**** EFS (Elastic File System)
** Logging
*** CloudWatch streams
**** nrel-docker4${sitename}-php
**** nrel-docker4${sitename}-nginx
** Caching
*** [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-elasticache.html][elasticache]] (Redis, Memcached)
*** Require forked version of [[https://github.com/awslabs/aws-elasticache-cluster-client-memcached-for-php][php memcached]] libraries to support memcached cluster
** [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-ses.html][📨 ses]] (smtp api)
** ssm (parameter store)
#+begin_src shell
/nrel/${sitename}/sandbox/
/nrel/${sitename}/stage/
/nrel/${sitename}/prod/
#+end_src

** ecr
*** 407445147104.dkr.ecr.us-west-2.amazonaws.com/communications-base-php:7.3.12.3
** elasticsearch
*** ELk stack
**** kibana - detail more
** [[https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html][IAM]]
#+begin_src php
$stsClient = new Aws\Sts\StsClient([
    'profile' => 'default',
    'region' => 'us-east-2',
    'version' => '2011-06-15'
]);
#+end_src
** [[https://aws.amazon.com/blogs/devops/introducing-application-load-balancer-unlocking-and-optimizing-architectures/][Elastic Load Balancing]]
*** nginx entrypoints
**** ${sitename}.nrelcloud.org (temporary prod site)
**** ${sitename}.org (external prod site available after cyber approval)
**** ${sitename}-stage.nrelcloud.org (stage)

** Simple Queue Service (Amazon [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-sqs.html][SQS]])
#+begin_src 
use Aws\Sqs\SqsClient;
$SqsClient->sendMessage(array(
    'QueueUrl' => 'https://sqs.us-west-2.amazonaws.com/991404956194/nrel-datacatalog-s3move',
    'MessageBody' => $message_body
));
#+end_src
* Using Web Services in Production
*** Seven production Drupal sites
**** Most scalable CMS 💧
**** RESTful web services are smooth in Drupal 8 
**** Modules supporting AWS Web Services
***** https://www.drupal.org/project/s3fs
***** https://www.drupal.org/project/ses_mailer
**** Decoupled Drupal
**** RESTful web services are smooth in Drupal 8 
*** Wordpress
**** Wordpress is 34 percent of web
**** using [[https://roots.io/twelve-factor-wordpress/][Bedrock]] to make WordPress cloud native
*** Other frameworks
**** php
***** Laravel
***** Symfony
**** ruby
**** python
*** Things I'd love to explore at NREL
**** Content Delivery
***** [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-cloudfront.html][CloudFront]] (CDN)
**** [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-cd-pipeline.html][Continuous Integration]]
****** Automated builds with [[https://aws.amazon.com/blogs/devops/build-a-continuous-delivery-pipeline-for-your-container-images-with-amazon-ecr-as-source/][AWS CodeBuild]]
****** Continuous Deployment with CodePipeline
****** https://circleci.com
**** Testing
***** [[http://www.inanzzz.com/index.php/post/2ek7/testing-aws-services-with-phpunit-within-symfony-application][Testing AWS services with PHPUnit]]
***** ci pipelines for builds
**** Data Store
***** [[https://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-dynamodb.html][DynamoDB]]
* Questions?
